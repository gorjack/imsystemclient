# -*- coding:utf-8 -*-

import sys
import os
import traceback
from xml.etree import ElementTree

def curFilePath():
    path = sys.path[0]
    if os.path.isdir(path):
        return path
    elif os.path.isfile(path):
        return os.path.dirname

solution_path = ''
file_path_out = curFilePath() + '\\result.txt'

def fill(check, d, sub_check):
    sub_keys = d[sub_check]
    for key in sub_keys:
        d = fill(check, d, key)
        d[check].add(key)

    return d

def parseDependency(input_file):
    print 'Parsing dependencies..'
    try:
        root = ElementTree.parse(input_file)
        conf_node = root.find('conf')
        global solution_path
        solution_path = os.path.abspath(conf_node.attrib['solution_path'])
        d = dict()
        list_node = root.getiterator('dependency')
        for node in list_node:
            first = node.attrib['check']
            second = node.attrib['key']
            d.setdefault(first, set())
            d[first].add(second)

        for check in d.keys():
            keys = d[check]
            for key in keys:
                d = fill(check, d, key)

        print ''
        return d
    except:
        traceback.print_exc()
        raise Exception()

def checkSingleDependency(check, key):
    f_out = open(file_path_out, 'a')
    all_lines_out = []

    fs_key = [item for item in os.walk(solution_path + '\\include\\' + check)]
    fs_


def checkDependency(d):
    for check in d.keys:
        for key in d[check]:
            checkSingleDependency(check, key)

def mainProc():
    print 'Mission Started..'
    input_file = curFilePath() + '\\input.xml'
    try:
        d = parseDependency(input_file)
        checkDependency(d)
        print 'Mission Accomplished!\n'
    except:
        print 'Mission Failed!\n'
    finally:
        os.system('pause')

if '__main__' == __name__:
    mainProc()